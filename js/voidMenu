// mymenu.js
import { getWidth, getHeight, add, removeAll, makeButton, ImageShape, Rectangle, Circle, Text } from './engine.js';




let color = "#ff4444";

let inMenu = true;
let leftbuttonSpacing = 150;

let logo = new ImageShape("https://codehs.com/uploads/8b490deb914374d0ca27f9ab21fac591");
logo.setSize(100, 100);
logo.setPosition(getWidth() / 2, getHeight()/32);
logo.setLayer(10);

let background = new Rectangle(getWidth(), getHeight());
background.setLayer(1);
background.setColor("#222222");

const TARGET_SCALE_FACTOR = 1.1; // Scale up to 110%
const ANIMATION_DURATION = 200; // milliseconds
const FRAME_RATE = 20; // milliseconds per frame (50 frames per second)
const NUM_ANIMATION_STEPS = ANIMATION_DURATION / FRAME_RATE;

// Helper function for exponential easing (ease-out quintic for smooth deceleration)
function easeOutQuint(t) {
    return 1 - Math.pow(1 - t, 5);
}

/**
 * Creates and sets up an image button with hover animations and click detection.
 * @param {string} imageUrl - The URL of the image for the button.
 * @param {number} originalWidth - The original width of the image.
 * @param {number} originalHeight - The original height of the image.
 * @param {number} xPos - The x-position of the button.
 * @param {number} yPos - The y-position of the button.
 * @param {number} hitboxWidth - The width of the button's hitbox.
 * @param {number} hitboxHeight - The height of the button's hitbox.
 * @param {Function} onClickCallback - The function to call when the button is clicked.
 * @returns {object} An object containing the image shape and its hitbox.
 */
function createAnimatedButton(imageUrl, originalWidth, originalHeight, xPos, yPos, hitboxWidth, hitboxHeight, onClickCallback) {
    let buttonImage = new ImageShape(imageUrl);
    buttonImage.originalWidth = originalWidth;
    buttonImage.originalHeight = originalHeight;
    buttonImage.setPosition(xPos, yPos);
    buttonImage.setSize(originalWidth, originalHeight);
    buttonImage.setLayer(3);
    buttonImage.originalX = xPos;
    buttonImage.originalY = yPos;
    buttonImage.currentAnimationStep = 0; // Tracks the current step in the animation

    let buttonHitbox = new Rectangle(hitboxWidth, hitboxHeight);
    // Position the hitbox relative to the button's actual position
    buttonHitbox.setPosition(xPos, yPos + (originalHeight - hitboxHeight) / 2); // Adjust y for centering if needed
    buttonHitbox.setColor("rgba(255, 0, 0, 0.0)"); // Semi-transparent red for debugging
    buttonHitbox.setLayer(15);

    if (inMenu) {
        makeButton(buttonHitbox, onClickCallback);

        let animationInterval = null;

        buttonHitbox.onHover = () => {
            if (animationInterval) {
                clearInterval(animationInterval);
            }
            buttonImage.currentAnimationStep = 0;

            animationInterval = setInterval(() => {
                buttonImage.currentAnimationStep++;
                let t = buttonImage.currentAnimationStep / NUM_ANIMATION_STEPS;
                if (t > 1) t = 1;

                let easedT = easeOutQuint(t);
                let currentScale = 1.0 + (TARGET_SCALE_FACTOR - 1.0) * easedT;

                const newWidth = buttonImage.originalWidth * currentScale;
                const newHeight = buttonImage.originalHeight * currentScale;

                const newX = buttonImage.originalX;
                const newY = buttonImage.originalY - (newHeight - buttonImage.originalHeight) / 2;
                
                buttonImage.setSize(newWidth, newHeight);
                buttonImage.setPosition(newX, newY);

                if (t === 1) {
                    clearInterval(animationInterval);
                }
            }, FRAME_RATE);
        };

        buttonHitbox.onUnhover = () => {
            if (animationInterval) {
                clearInterval(animationInterval);
            }
            buttonImage.currentAnimationStep = 0;
            const initialScaleForUnhover = buttonImage.width / buttonImage.originalWidth;
            const scaleDifference = initialScaleForUnhover - 1.0;

            animationInterval = setInterval(() => {
                buttonImage.currentAnimationStep++;
                let t = buttonImage.currentAnimationStep / NUM_ANIMATION_STEPS;
                if (t > 1) t = 1;

                let easedT = easeOutQuint(t);
                let currentScale = initialScaleForUnhover - (scaleDifference * easedT);

                if (currentScale < 1.0) currentScale = 1.0;

                const newWidth = buttonImage.originalWidth * currentScale;
                const newHeight = buttonImage.originalHeight * currentScale;

                const newX = buttonImage.originalX;
                const newY = buttonImage.originalY - (newHeight - buttonImage.originalHeight) / 2;
                
                buttonImage.setSize(newWidth, newHeight);
                buttonImage.setPosition(newX, newY);

                if (t === 1) {
                    clearInterval(animationInterval);
                    buttonImage.setSize(buttonImage.originalWidth, buttonImage.originalHeight);
                    buttonImage.setPosition(buttonImage.originalX, buttonImage.originalY);
                }
            }, FRAME_RATE);
        };
    }
    return { image: buttonImage, hitbox: buttonHitbox };
}

// Button Definitions using the reusable function
let playButton = createAnimatedButton(
    "https://codehs.com/uploads/990902d0fe3f334a496c84d9d2b6f00a",
    1920/6, 1080/6, // Original width and height
    0, getHeight()/4, // Position
    1920/6 - 25, 1080/8, // Hitbox dimensions
    () => { 
        console.log("Play button hit"); 
        playButtonHit();
    }
);

let settingsButton = createAnimatedButton(
    "https://codehs.com/uploads/b3e2a8dfe6107e2af96ce74f9799b0f8",
    1920/8, 1080/8,
    0 + 15, getHeight()/4 + leftbuttonSpacing + playButton.image.y/8,
    1920/8, 1080/10,
    () => { console.log("Settings button hit"); }
);

let careerButton = createAnimatedButton(
    "https://codehs.com/uploads/afd818ac19ff0bbd919c766a1625071e",
    1920/8, 1080/8,
    0 + 15, getHeight()/4 + leftbuttonSpacing*2 + playButton.image.y/8,
    1920/8, 1080/10,
    () => { console.log("Career button hit"); }
);

let loadoutButton = createAnimatedButton(
    "https://codehs.com/uploads/765a0c87dc6d5d571ff25f139003227f",
    1920/8, 1080/8,
    0 + 15, getHeight()/4 + leftbuttonSpacing*3 + playButton.image.y/8,
    1920/8, 1080/10,
    () => { console.log("Loadout button hit"); }
);

let crocoPlayButton = createAnimatedButton(
    "https://codehs.com/uploads/990902d0fe3f334a496c84d9d2b6f00a",
    1920/6, 1080/6, // Original width and height
    getWidth()/1.5, getHeight()-200, // Position
    1920/6 - 25, 1080/8, // Hitbox dimensions
    () => { 
        console.log("crocoPlayButton"); 
        
    }
);

let sigmaPlayButton = createAnimatedButton(
    "https://codehs.com/uploads/990902d0fe3f334a496c84d9d2b6f00a",
    1920/6, 1080/6, // Original width and height
    getWidth()/3, getHeight()-200, // Position
    1920/6 - 25, 1080/8, // Hitbox dimensions
    () => { 
        console.log("sigmaPlayButton"); 
        
    }
);


function menu(){
    add(logo);
    add(background);
    add(playButton.image);
    add(settingsButton.image);
    add(careerButton.image);
    add(loadoutButton.image);
    
    add(playButton.hitbox);
    add(settingsButton.hitbox);
    add(careerButton.hitbox);
    add(loadoutButton.hitbox);
}

menu();


function playButtonHit(){
    removeAll();
    add(logo);
    add(background);
    add(crocoPlayButton.image);
    add(sigmaPlayButton.image);
}
